{"version":3,"sources":["images/loading.jpg","components/Header/Header.tsx","components/Home/Home.tsx","components/NotFoundPage/NotFoundPage.tsx","components/CategoriesList/CategoriesListData.ts","api/api.ts","components/Button/Button.tsx","components/Input/Input.tsx","components/EntityInfo/EntityInfo.tsx","components/EntitiesList/EntitiesList.tsx","components/EntitiesList/ListToShow.tsx","components/Content/Content.tsx","components/CategoriesList/CategoriesList.tsx","App.tsx","index.tsx"],"names":["module","exports","Header","className","id","to","exact","Home","NotFoundPage","categoriesData","title","getData","type","a","currentList","currentPage","nextPage","fetch","then","respond","json","response2","push","results","next","Button","history","useHistory","location","useLocation","searchParams","URLSearchParams","search","nextOrder","get","onClick","set","toString","Input","query","useState","visibleQuery","setVisibleQuery","prepareQueryToUpdate","useCallback","debounce","newQuery","delete","placeholder","value","onChange","event","target","EntityInfo","list","currentCategory","useParams","currentEntity","entity","console","log","map","key","uuid","birth_year","EntitiesList","isLoading","currentPath","queryFilter","querySortOrder","filteredList","people","path","pattern","RegExp","filter","test","name","model","filterList","reversedList","sortedList","reverse","reverseList","sort","entityA","entityB","localeCompare","sortList","src","loading","alt","length","item","nameForRoute","replace","titleForRoute","Content","setIsLoading","currentTitle","setCurrentTitle","categoryContent","setCategoryContent","titleAdaptive","toLowerCase","fetchData","titleToGet","peopleFromServer","useEffect","CategoriesList","category","App","component","ReactDOM","render","document","getElementById"],"mappings":"0GAAAA,EAAOC,QAAU,IAA0B,qC,iRCK9BC,G,YAAa,kBACxB,4BAAQC,UAAU,UAChB,yBAAKA,UAAU,kDACb,yBAAKA,UAAU,2BAA2BC,GAAG,iBAC3C,wBAAID,UAAU,sBACZ,wBAAIA,UAAU,YACZ,kBAAC,IAAD,CAASA,UAAU,WAAWE,GAAG,IAAIC,OAAK,GAA1C,cAEF,4BACE,kBAAC,IAAD,CAASH,UAAU,WAAWE,GAAG,cAAcC,OAAK,GAApD,0BCVCC,G,MAAW,kBACtB,wBAAIJ,UAAU,WAAd,eCDWK,G,MAAmB,kBAC9B,wBAAIL,UAAU,WAAd,oB,QCDWM,EAAmC,CAC9C,CAAEC,MAAO,UACT,CAAEA,MAAO,WACT,CAAEA,MAAO,SACT,CAAEA,MAAO,WACT,CAAEA,MAAO,YACT,CAAEA,MAAO,c,uCCVEC,EAAO,uCAAG,WAAWC,GAAX,qBAAAC,EAAA,yDACfC,EAAc,GAChBC,EAAc,EACdC,EAAW,UAEXJ,EALiB,4BAMbI,EANa,iCAOOC,MAAM,wBAAD,OAAyBL,EAAzB,kBAAuCG,IAAeG,MAAK,SAAAC,GAAO,OAAIA,EAAQC,UAP1F,OAOXC,EAPW,OAQjBP,EAAYQ,KAAZ,MAAAR,EAAW,YAASO,EAAUE,UAC9BR,IACAC,EAAWK,EAAUG,KAVJ,gDAedV,GAfc,4CAAH,sD,iBCGPW,EAAa,WACxB,IAAMC,EAAUC,cACVC,EAAWC,cACXC,EAAe,IAAIC,gBAAgBH,EAASI,QAG5CC,EAA6B,WADdH,EAAaI,IAAI,aACQ,UAAY,SAS1D,OACE,4BACE/B,UAAU,kBACVS,KAAK,SACLuB,QAXe,WACjBL,EAAaM,IAAI,YAAaH,GAC9BP,EAAQJ,KAAK,CACXU,OAAQF,EAAaO,eAKvB,SCZSC,G,MAAY,WACvB,IAAMZ,EAAUC,cACVC,EAAWC,cACXC,EAAe,IAAIC,gBAAgBH,EAASI,QAC5CO,EAAQT,EAAaI,IAAI,UAAY,GAJd,EAMWM,mBAAiBD,GAN5B,mBAMtBE,EANsB,KAMRC,EANQ,KAQvBC,EAAuBC,sBAC3BC,KAAS,SAACC,GACJA,EACFhB,EAAaM,IAAI,QAASU,GAE1BhB,EAAaiB,OAAO,SAGtBrB,EAAQJ,KAAK,CACXU,OAAQF,EAAaO,eAEtB,KACH,IAUF,OACE,yBAAKlC,UAAU,WACb,2BACEA,UAAU,eACV6C,YAAY,iBACZpC,KAAK,OACLqC,MAAOR,EACPS,SAdoB,SAACC,GAAgD,IACjEF,EAAUE,EAAMC,OAAhBH,MAERP,EAAgBO,GAChBN,EAAqBM,MAYnB,kBAAC,EAAD,S,qBC9BOI,EAAkC,SAAC,GAAc,IAAZC,EAAW,EAAXA,KAC1CC,EAAkBC,cAAyB9C,MAC3C+C,EAAgBD,cAAyBE,OAI/C,OAFAC,QAAQC,IAAIL,EAAiBE,GAG3B,yBAAKtD,UAAU,gBACb,wBAAIA,UAAU,gBACbmD,EAAKO,KAAI,SAAAH,GACR,OAAQH,GACN,IAAK,SAmBL,QACE,OACE,wBAAIO,IAAKC,kBAAT,sBACkBL,EAAOM,oBC/B1BC,G,MAAsC,SAAC,GAAyB,IAAvBX,EAAsB,EAAtBA,KAAMY,EAAgB,EAAhBA,UACpDC,EAAcX,cAAyB9C,MACvCkB,EAAWC,cACXC,EAAe,IAAIC,gBAAgBH,EAASI,QAC5CoC,EAActC,EAAaI,IAAI,UAAY,GAC3CmC,EAAiBvC,EAAaI,IAAI,cAAgB,GAElDoC,ECvBD,SAAoBC,EAAyBhC,EAAeiC,GACjE,IAAMC,EAAU,IAAIC,OAAJ,UAAcnC,GAAS,MAEvC,OAAQiC,GACN,IAAK,SACL,IAAK,UACL,IAAK,UACH,OAAOD,EAAOI,QAAO,SAAAjB,GAAM,OAAIe,EAAQG,KAAKlB,EAAOmB,SACrD,IAAK,QACH,OAAON,EAAOI,QAAO,SAAAjB,GAAM,OAAIe,EAAQG,KAAKlB,EAAOhD,UACrD,IAAK,YACL,IAAK,WACH,OAAO6D,EAAOI,QAAO,SAAAjB,GAAM,OAAIe,EAAQG,KAAKlB,EAAOmB,OAASJ,EAAQG,KAAKlB,EAAOoB,UAClF,QACE,OAAOP,GDSUQ,CAAWzB,EAAMc,EAAaD,GAE7Ca,ECkBD,SAAqBC,EAA6BZ,GACvD,MAAuB,YAAnBA,EACKY,EAAWC,UAGbD,EDvBcE,CCPhB,SAAkB7B,EAAuBe,EAAwBG,GACtE,GAAuB,WAAnBH,EACF,OAAQG,GACN,IAAK,SACL,IAAK,UACL,IAAK,UACL,IAAK,YACL,IAAK,WACH,OAAOlB,EACJ8B,MACC,SAACC,EAASC,GAAV,OAAsBD,EAAQR,KAAKU,cAAcD,EAAQT,SAE/D,IAAK,QACH,OAAOvB,EACN8B,MACC,SAACC,EAASC,GAAV,OAAsBD,EAAQ3E,MAAM6E,cAAcD,EAAQ5E,UAE9D,QACE,OAAO4C,EAIX,OAAOA,EDhBUkC,CAASlB,EAAcD,EAAgBF,GACbE,GAG7C,OAFAV,QAAQC,IAAIU,GAGV,yBAAKnE,UAAU,YACZ+D,GACC,yBAAK/D,UAAU,2BACb,yBACEA,UAAU,kBACVsF,IAAKC,IACLC,IAAI,aAIV,wBAAIxF,UAAU,qBAAd,8CACiB,IAAhBmD,EAAKsC,QACJ,wBAAIzF,UAAU,kBACX6E,EAAanB,KAAI,SAAAgC,GAChB,IAAMC,EAAeD,EAAKhB,MAAQgB,EAAKhB,KAAKkB,QAAQ,MAAO,KACrDC,EAAgBH,EAAKnF,OAASmF,EAAKnF,MAAMqF,QAAQ,MAAO,KAC9D,OACE,wBACEjC,IAAK+B,EAAKhB,MAAQgB,EAAKnF,MACvBP,UAAU,kBAEV,kBAAC,IAAD,CACEA,UAAU,iBACVE,GAAE,sBAAiB8D,EAAjB,YAAgC2B,GAAgBE,IAEjDH,EAAKhB,MAAQgB,EAAKnF,YAO7B,kBAAC,EAAD,CAAY4C,KAAMA,OEtDb2C,G,MAAc,WAAO,IAAD,EACGzD,oBAAkB,GADrB,mBACxB0B,EADwB,KACbgC,EADa,OAES1D,mBAAiB,IAF1B,mBAExB2D,EAFwB,KAEVC,EAFU,OAGe5D,mBAA0B,IAHzC,mBAGxB6D,EAHwB,KAGPC,EAHO,KAIzB5F,EAAU8C,cAAV9C,MAEA6F,EAAgB7F,GAASA,EAAM8F,cAEjCL,IAAiBI,GACnBH,EAAgBG,GAGlB,IAAME,EAAS,uCAAG,WAAOC,GAAP,eAAA7F,EAAA,6DAChBqF,GAAa,GADG,SAEgCvF,EAAQ+F,GAFxC,OAEVC,EAFU,OAGhBL,EAAmBK,GACnBT,GAAa,GAJG,2CAAH,sDAef,OARAU,qBAAU,WAERH,EAAUN,KAET,CAACA,IAEJxC,QAAQC,IAAIyC,GAGV,yBAAKlG,UAAU,WACb,kBAAC,EAAD,MACA,kBAAC,EAAD,CAAcmD,KAAM+C,EAAiBnC,UAAWA,OCjCzC2C,EAAqB,kBAChC,oCACA,4BAAQ1G,UAAU,UAChB,yBAAKA,UAAU,kDACb,yBAAKA,UAAU,2BAA2BC,GAAG,iBAC3C,wBAAID,UAAU,sBACXM,EAAeoD,KAAI,SAAAiD,GAAQ,OAC5B,wBAAI3G,UAAU,WAAW2D,IAAKC,kBAC5B,kBAAC,IAAD,CAAS5D,UAAU,WAAWE,GAAE,sBAAiByG,EAASpG,OAASJ,OAAK,GAAxE,IAA2EwG,EAASpG,MAApF,aAOV,kBAAC,EAAD,QCMaqG,EAnBC,kBACd,oCACE,yBAAK5G,UAAU,OACb,kBAAC,EAAD,OAEF,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOqE,KAAK,IAAIlE,OAAK,EAAC0G,UAAWzG,IACjC,kBAAC,IAAD,CAAOD,OAAK,EAACkE,KAAK,SAChB,kBAAC,IAAD,CAAUnE,GAAG,OAEf,kBAAC,IAAD,CACEmE,KAAK,+BACLwC,UAAWH,IAEb,kBAAC,IAAD,CAAOrC,KAAK,IAAIwC,UAAWxG,OCjBjCyG,IAASC,OACP,kBAAC,IAAD,KACE,kBAAC,EAAD,OACaC,SAASC,eAAe,W","file":"static/js/main.2783b5d1.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/loading.b8a7f631.jpg\";","import React, { FC } from 'react';\nimport { NavLink } from 'react-router-dom';\n\nimport './Header.css';\n\nexport const Header: FC = () => (\n  <header className=\"center\">\n    <nav className=\"navbar navbar-expand-lg navbar-dark bg-primary\">\n      <div className=\"collapse navbar-collapse\" id=\"navbarColor01\">\n        <ul className=\"navbar-nav mr-auto\">\n          <li className=\"nav-item\">\n            <NavLink className=\"nav-link\" to=\"/\" exact>Home page</NavLink>\n          </li>\n          <li>\n            <NavLink className=\"nav-link\" to=\"/categories\" exact>Categories page</NavLink>\n          </li>\n        </ul>\n      </div>\n    </nav>\n  </header>\n);\n","import React, { FC } from 'react';\n\nimport './Home.css';\n\nexport const Home: FC = () => (\n  <h1 className=\"heading\">Home page</h1>\n);\n","import React, { FC } from 'react';\n\nimport './NotFoundPage.css';\n\nexport const NotFoundPage: FC = () => (\n  <h1 className=\"heading\">Page not found</h1>\n);\n","interface CategoriesData {\n  title: string;\n}\n\nexport const categoriesData: CategoriesData[] = [\n  { title: 'People' },\n  { title: 'Planets' },\n  { title: 'Films' },\n  { title: 'Species' },\n  { title: 'Vehicles' },\n  { title: 'Starships' },\n];\n","export const getData = async <T>( type: string ): Promise<T[]> => {\n  const currentList = [];\n  let currentPage = 1;\n  let nextPage = 'exists';\n\n  if (type) {\n    while(nextPage) {\n      const response2 = await fetch(`http://swapi.dev/api/${type}/?page=${currentPage}`).then(respond => respond.json());\n      currentList.push(...response2.results)\n      currentPage++;\n      nextPage = response2.next;\n    }\n  }\n\n\n  return currentList;\n};","import React, { FC } from 'react';\nimport { useHistory, useLocation } from 'react-router-dom';\n\nexport const Button: FC = () => {\n  const history = useHistory();\n  const location = useLocation();\n  const searchParams = new URLSearchParams(location.search);\n\n  const currentOrder = searchParams.get('sortOrder');\n  const nextOrder = currentOrder === 'sorted' ? 'reverse' : 'sorted';\n\n  const handleSort = () => {\n    searchParams.set('sortOrder', nextOrder);\n    history.push({\n      search: searchParams.toString(),\n    });\n  }\n\n  return (\n    <button\n      className=\"btn btn-success\"\n      type=\"button\"\n      onClick={handleSort}\n    >\n      Sort\n    </button>\n  );\n}\n","import React, { FC, useState, useCallback } from 'react';\nimport debounce from 'lodash/debounce';\nimport { useHistory, useLocation } from 'react-router-dom';\nimport { Button } from '../Button/Button';\n\nimport './Input.css';\n\nexport const Input: FC = () => {\n  const history = useHistory();\n  const location = useLocation();\n  const searchParams = new URLSearchParams(location.search);\n  const query = searchParams.get('query') || '';\n\n  const [visibleQuery, setVisibleQuery] = useState<string>(query);\n\n  const prepareQueryToUpdate = useCallback(\n    debounce((newQuery: string) => {\n      if (newQuery) {\n        searchParams.set('query', newQuery);\n      } else {\n        searchParams.delete('query');\n      }\n\n      history.push({\n        search: searchParams.toString(),\n      });\n    }, 500),\n    [],\n  );\n\n  const handleQueryUpdate = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const { value } = event.target;\n\n    setVisibleQuery(value);\n    prepareQueryToUpdate(value);\n  };\n\n  return (\n    <div className=\"wrapper\">\n      <input\n        className=\"form-control\"\n        placeholder=\"Type name here\"\n        type=\"text\"\n        value={visibleQuery}\n        onChange={handleQueryUpdate}\n      />\n      <Button />\n    </div>\n  );\n};\n","import React, { FC } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { StarwarsTypes } from '../../interfaces';\nimport { uuid } from 'uuidv4';\n\n// import './EntityInfo.css';\n\ninterface EntityInfoProps {\n  list: StarwarsTypes[];\n}\n\ninterface MatchParams {\n  title: string;\n  entity: string;\n}\n\nexport const EntityInfo: FC<EntityInfoProps> = ({ list }) => {\n  const currentCategory = useParams<MatchParams>().title;\n  const currentEntity = useParams<MatchParams>().entity;\n\n  console.log(currentCategory, currentEntity)\n\n  return (\n    <div className=\"entity__info\">\n      <ul className=\"entity__list\">\n      {list.map(entity => {\n        switch (currentCategory) {\n          case 'People':\n            return (\n              <li key={uuid()}>\n                  {`Birth year: ${entity.birth_year}`}\n              </li>\n            )\n          // case 'Species':\n          // case 'Planets':\n          // case 'Starships':\n          // case 'Vehicles':\n          //   return list\n          //     .sort(\n          //       (entityA, entityB) => entityA.name.localeCompare(entityB.name),\n          //     );\n          // case 'Films':\n          //   return list\n          //   .sort(\n          //     (entityA, entityB) => entityA.title.localeCompare(entityB.title),\n          //   );\n          default:\n            return (\n              <li key={uuid()}>\n                {`Birth year: ${entity.birth_year}`}\n              </li>\n            );\n          }\n      })}\n\n      </ul>\n\n    </div>\n  );\n} ","import React, { FC } from 'react';\nimport { useParams, useLocation, Link } from 'react-router-dom';\nimport { StarwarsTypes } from '../../interfaces';\nimport { filterList, sortList, reverseList } from './ListToShow';\nimport loading from '../../images/loading.jpg';\nimport { EntityInfo } from '../EntityInfo/EntityInfo'\n\nimport './EntitiesList.css';\n\ninterface EntitiesListProps {\n  list: StarwarsTypes[];\n  isLoading: boolean;\n}\n\ninterface MatchParams {\n  title: string;\n}\n\nexport const EntitiesList: FC<EntitiesListProps> = ({ list, isLoading }) => {\n  const currentPath = useParams<MatchParams>().title;\n  const location = useLocation();\n  const searchParams = new URLSearchParams(location.search);\n  const queryFilter = searchParams.get('query') || '';\n  const querySortOrder = searchParams.get('sortOrder') || '';\n\n  const filteredList = filterList(list, queryFilter, currentPath);\n  const sortedList = sortList(filteredList, querySortOrder, currentPath)\n  const reversedList = reverseList(sortedList, querySortOrder)\n  console.log(filteredList)\n\n  return (\n    <div className=\"entities\">\n      {isLoading && \n        <div className=\"entities__image-wrapper\">\n          <img \n            className=\"entities__image\"\n            src={loading} \n            alt=\"loading\" \n          />\n        </div>\n      }\n      <h2 className=\"entities__heading\">Please, choose one to get more information</h2>\n      {list.length !== 0 && (\n        <ul className=\"entities__list\">\n          {reversedList.map(item => {\n            const nameForRoute = item.name && item.name.replace(/\\s/g, '-');\n            const titleForRoute = item.title && item.title.replace(/\\s/g, '-');\n            return (\n              <li \n                key={item.name || item.title}\n                className=\"entities__item\"\n              >\n                <Link \n                  className=\"entities__link\"\n                  to={`/categories/${currentPath}/${nameForRoute || titleForRoute}`}\n                >\n                  {item.name || item.title}\n                </Link>\n              </li>\n            )\n          } )}\n        </ul>\n        )}\n        <EntityInfo list={list} />\n    </div>\n  );\n} ","import { StarwarsTypes } from '../../interfaces';\n\nexport function filterList(people: StarwarsTypes[], query: string, path: string) {\n  const pattern = new RegExp(`${query}`, 'gi');\n\n  switch (path) {\n    case 'People':\n    case 'Species':\n    case 'Planets':\n      return people.filter(entity => pattern.test(entity.name));\n    case 'Films':\n      return people.filter(entity => pattern.test(entity.title));\n    case 'Starships':\n    case 'Vehicles':\n      return people.filter(entity => pattern.test(entity.name) || pattern.test(entity.model));\n    default:\n      return people;\n  }\n}\n\nexport function sortList(list: StarwarsTypes[], querySortOrder: string, path: string) {\n  if (querySortOrder === 'sorted') {\n    switch (path) {\n      case 'People':\n      case 'Species':\n      case 'Planets':\n      case 'Starships':\n      case 'Vehicles':\n        return list\n          .sort(\n            (entityA, entityB) => entityA.name.localeCompare(entityB.name),\n          );\n      case 'Films':\n        return list\n        .sort(\n          (entityA, entityB) => entityA.title.localeCompare(entityB.title),\n        );\n      default:\n        return list;\n    }\n  }\n\n    return list;\n}\n\nexport function reverseList(sortedList: StarwarsTypes[], querySortOrder: string) {\n  if (querySortOrder === 'reverse') {\n    return sortedList.reverse();\n  }\n\n  return sortedList;\n}\n","import React, { FC, useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { getData } from '../../api/api';\nimport { StarwarsTypes } from '../../interfaces';\nimport { Input } from '../Input/Input';\nimport { EntitiesList } from '../EntitiesList/EntitiesList';\n\nimport './Content.css';\n\nexport const Content: FC = () => {\n  const [isLoading, setIsLoading] = useState<boolean>(false);\n  const [currentTitle, setCurrentTitle] = useState<string>('');\n  const [categoryContent, setCategoryContent] = useState<StarwarsTypes[]>([]);\n  let { title } = useParams();\n\n  const titleAdaptive = title && title.toLowerCase();\n\n  if (currentTitle !== titleAdaptive) {\n    setCurrentTitle(titleAdaptive)\n  }\n\n  const fetchData = async (titleToGet: string) => {\n    setIsLoading(true)\n    const peopleFromServer: StarwarsTypes[] = await getData(titleToGet);\n    setCategoryContent(peopleFromServer);\n    setIsLoading(false)\n  }\n\n  useEffect(() => {\n\n    fetchData(currentTitle);\n\n  }, [currentTitle]);\n\n  console.log(categoryContent)\n\n  return (\n    <div className=\"content\">\n      <Input />\n      <EntitiesList list={categoryContent} isLoading={isLoading} />\n    </div>\n  );\n} ","import React, { FC } from 'react';\nimport { NavLink } from 'react-router-dom';\nimport { uuid } from 'uuidv4';\nimport { categoriesData } from './CategoriesListData';\nimport { Content } from '../Content/Content';\n\nexport const CategoriesList: FC = () => (\n  <>\n  <header className=\"center\">\n    <nav className=\"navbar navbar-expand-lg navbar-dark bg-primary\">\n      <div className=\"collapse navbar-collapse\" id=\"navbarColor01\">\n        <ul className=\"navbar-nav mr-auto\">\n          {categoriesData.map(category => (\n          <li className=\"nav-item\" key={uuid()}>\n            <NavLink className=\"nav-link\" to={`/categories/${category.title}`} exact> {category.title} </NavLink>\n          </li>\n          ))}\n        </ul>\n      </div>\n    </nav>\n  </header>\n  <Content />\n  </>\n);\n","import React, { FC } from 'react';\nimport { Redirect, Switch, Route } from 'react-router-dom';\nimport './App.css';\nimport { Header } from './components/Header/Header';\nimport { Home } from './components/Home/Home';\nimport { NotFoundPage } from './components/NotFoundPage/NotFoundPage';\nimport { CategoriesList } from './components/CategoriesList/CategoriesList';\n\nconst App: FC = () => (\n  <>\n    <div className=\"App\">\n      <Header />\n    </div>\n    <Switch>\n      <Route path=\"/\" exact component={Home} />\n      <Route exact path=\"/home\">\n        <Redirect to=\"/\" />\n      </Route>\n      <Route\n        path=\"/categories/:title?/:entity?\"\n        component={CategoriesList}\n      />\n      <Route path=\"*\" component={NotFoundPage} />\n    </Switch>\n  </>\n);\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { HashRouter } from 'react-router-dom';\nimport App from './App';\n\nReactDOM.render(\n  <HashRouter>\n    <App />\n  </HashRouter>, document.getElementById('root'),\n);\n"],"sourceRoot":""}